//#define F_CPU 1000000UL
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>
#include <avr/sleep.h>

volatile uint16_t sekunden = 50;
volatile uint16_t minuten = 45;
volatile uint16_t stunden = 11;
volatile uint16_t helligkeit = 32;

void setZeit(void) {
    ASSR |= (1<< AS2);  // Timer2 auf asynchronen Modus mit externem Quarz setzen
    TCCR2B |= (1 << CS22) | (1 << CS20);  // Vorteiler auf 128 setzen --> 1Hz Timer
    TIMSK2 |= (1 << TOIE2);  // Timer2 Overflow Interrupt aktivieren
}

void pwmSetzen(){
	TCCR1A = (1 << WGM10) | (1 << COM1A1) | (1 << COM1B1); // 8-bit Fast PWM, Clear on Compare Match
    TCCR1B = (1 << WGM12) | (1 << CS11); // Prescaler = 8
    
	OCR1AL = helligkeit;  // PWM-Startwert für OC1A setzen
    OCR1BL = helligkeit;  // PWM-Startwert für OC1B setzen
}

void registerSetzen(){
	DDRB =(1<<PB1)|(1<<PB2);	// PB1 (OC1A) und PB2 (OC1B) als Eingang setzen
	PORTB =(1<<PB1)|(1<<PB1);		//OCA

	DDRD = (1<<PD7)|(1<<PD6)|(1<<PD5)|(PD1<<1)|(PD0<<1)|(1<<PD2)|(1<<PD3);
	PORTD|=(1<<PD2)|(1<<PD3)|(1<<PD4);

	DDRC =(1<<PC5)|(1<<PC4)|(1<<PC3)|(1<<PC2)|(1<<PC1)|(1<<PC0);	
}

void setInterrupt(){
	EICRA|=(1<<ISC01)|(1<<ISC11);  // Fallende Flanke an INT0 und INT1
    EIMSK|=(1<<INT0)|(1<<INT1);   // Externe Interrupts INT0 und INT1 aktivieren
}

void zeit(){

	if(sekunden >= 60){
		sekunden = 0;
		minuten++;
		if(minuten >= 59){
			minuten = 0;
			stunden++;
			if(stunden >= 24){
				stunden = 0;
			}
			PORTD = (PORTD & 0b00001100) | ((stunden & 0x1C) << 3) | (stunden & 0x03);
		}
		PORTC = minuten;
	}

}

int main () {

	setZeit();
	pwmSetzen();
	registerSetzen();
	setInterrupt();
	sei();

	//set_sleep_mode(SLEEP_MODE_PWR_DOWN);
	
	PORTC = minuten;
	PORTD = (PORTD & 0b00001100) | ((stunden & 0x1C) << 3) | (stunden & 0x03);

	while (1){
		if (!(PIND & (1 << PD4))) {  // Wenn PD4 LOW (Button gedrückt)
            //schlafenLegen();
			//PINC = 0;
        } 
		else 
		{
        	zeit();
        };
	}
}

//Timer Interupt,kommt jede Sekunde
ISR(TIMER2_OVF_vect) {
		sekunden++;
}

//Helligkeitseinsetllung
ISR(INT0_vect){

	if(helligkeit <= 64){
		helligkeit = 255;
	}
	else{
		helligkeit-=32;
	}
	OCR1AL = helligkeit;  // PWM-Startwert für OC1A setzen
    OCR1BL = helligkeit;  // PWM-Startwert für OC1B setzen
}

//sleepmodus
ISR(INT1_vect) {
	//set_sleep_mode(SLEEP_MODE_IDLE);
	//sleep_mode();
}
